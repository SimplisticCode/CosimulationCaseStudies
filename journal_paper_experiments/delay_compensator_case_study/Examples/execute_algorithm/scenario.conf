# A name for the scenario
name = "Master algorithm for Mass Spring Damper example."

# The scenario which defines fmus with ports where the port reactivity and dependencies are defined. 
# It also defines connections between output and input ports.
scenario = {
    fmus = {
        QuarterCar_qcar = {
            inputs = {
                DamperForce = {reactivity=delayed}
            },
            outputs = {
                # RattlePos = {dependencies-init=[], dependencies=[]}
                RattleSpeed = {dependencies-init=[], dependencies=[]}
                RattleAcc = {dependencies-init=[], dependencies=[]}
                # SprungPosition = {dependencies-init=[], dependencies=[]}
                SprungSpeed = {dependencies-init=[], dependencies=[]}
                # SprungAcc = {dependencies-init=[], dependencies=[]}
                # UnsprungPosition = {dependencies-init=[], dependencies=[]}
                "x[1]" = {dependencies-init=[], dependencies=[]}
                "x[2]" = {dependencies-init=[], dependencies=[]}
                "x[3]" = {dependencies-init=[], dependencies=[]}
                "x[4]" = {dependencies-init=[], dependencies=[]}
                "x[5]" = {dependencies-init=[], dependencies=[]}
                "x[6]" = {dependencies-init=[], dependencies=[]}
                "x[7]" = {dependencies-init=[], dependencies=[]}
                # "u[1]" = {dependencies-init=[], dependencies=[]}
                # "u[2]" = {dependencies-init=[], dependencies=[]}
                # "u[3]" = {dependencies-init=[], dependencies=[]}
                # "u[4]" = {dependencies-init=[], dependencies=[]}
            }
        }
        Sender_sender = {
            inputs = {
                RattleSpeed = {reactivity=reactive}
                SprungSpeed = {reactivity=reactive}
                "x[1]" = {reactivity=reactive}
                "x[2]" = {reactivity=reactive}
                "x[3]" = {reactivity=reactive}
                "x[4]" = {reactivity=reactive}
                "x[5]" = {reactivity=reactive}
                "x[6]" = {reactivity=reactive}
                "x[7]" = {reactivity=reactive}
            },
            outputs = {
                Time1 = {dependencies-init=[], dependencies=[]}
                RattleSpeed1 = {dependencies-init=[], dependencies=[]}
                SprungSpeed1 = {dependencies-init=[], dependencies=[]}
                Time2 = {dependencies-init=[], dependencies=[]}
                RattleSpeed2 = {dependencies-init=[], dependencies=[]}
                SprungSpeed2 = {dependencies-init=[], dependencies=[]}
            }
        }
        Delay_delay = {
            inputs = {
                RattleSpeed1 = {reactivity=reactive}
                SprungSpeed1 = {reactivity=reactive}
                RattleSpeed2 = {reactivity=reactive}
                SprungSpeed2 = {reactivity=reactive}
                Time1 = {reactivity=reactive}
                Time2 = {reactivity=reactive}
            },
            outputs = {
                RattleSpeed1Delayed = {dependencies-init=[], dependencies=[]}
                SprungSpeed1Delayed = {dependencies-init=[], dependencies=[]}
                RattleSpeed2Delayed = {dependencies-init=[], dependencies=[]}
                SprungSpeed2Delayed = {dependencies-init=[], dependencies=[]}
                Time1Delayed = {dependencies-init=[], dependencies=[]}
                Time2Delayed = {dependencies-init=[], dependencies=[]}
            }
        }
        Receiver_receiver = {
            inputs = {
                Time1 = {reactivity=reactive}
                RattleSpeed1 = {reactivity=reactive}
                SprungSpeed1 = {reactivity=reactive}
                Time2 = {reactivity=reactive}
                RattleSpeed2 = {reactivity=reactive}
                SprungSpeed2 = {reactivity=reactive}
            },
            outputs = {
                RattleSpeed_m_s_ = {dependencies-init=[], dependencies=[]}
                SprungSpeed_m_s_ = {dependencies-init=[], dependencies=[]}
            }
        }
        Damper_damper = {
            inputs = {
                RattleSpeed = {reactivity=reactive}
                SprungSpeed = {reactivity=reactive}
            },
            outputs = {
                DamperForce_N_ = {dependencies-init=[RattleSpeed], dependencies=[]}
            }
        }
        Plot_plot = {
            inputs = {
                RattleAcc = {reactivity=reactive}
            },
            outputs = {}
        }
    }
    connections = [
        QuarterCar_qcar.RattleSpeed -> Sender_sender.RattleSpeed
        QuarterCar_qcar.SprungSpeed -> Sender_sender.SprungSpeed
        QuarterCar_qcar.RattleAcc -> Plot_plot.RattleAcc
        "QuarterCar_qcar.x[1]" -> "Sender_sender.x[1]"
        "QuarterCar_qcar.x[2]" -> "Sender_sender.x[2]"
        "QuarterCar_qcar.x[3]" -> "Sender_sender.x[3]"
        "QuarterCar_qcar.x[4]" -> "Sender_sender.x[4]"
        "QuarterCar_qcar.x[5]" -> "Sender_sender.x[5]"
        "QuarterCar_qcar.x[6]" -> "Sender_sender.x[6]"
        "QuarterCar_qcar.x[7]" -> "Sender_sender.x[7]"
        # "QuarterCar_qcar.u[1]" -> Sender_sender.u
        
        Sender_sender.Time1 -> Delay_delay.Time1
        Sender_sender.RattleSpeed1 -> Delay_delay.RattleSpeed1
        Sender_sender.SprungSpeed1 -> Delay_delay.SprungSpeed1
        Sender_sender.Time2 -> Delay_delay.Time2
        Sender_sender.RattleSpeed2 -> Delay_delay.RattleSpeed2
        Sender_sender.SprungSpeed2 -> Delay_delay.SprungSpeed2
        
        Delay_delay.Time1Delayed -> Receiver_receiver.Time1
        Delay_delay.RattleSpeed1Delayed -> Receiver_receiver.RattleSpeed1
        Delay_delay.SprungSpeed1Delayed -> Receiver_receiver.SprungSpeed1
        Delay_delay.Time2Delayed -> Receiver_receiver.Time2
        Delay_delay.RattleSpeed2Delayed -> Receiver_receiver.RattleSpeed2
        Delay_delay.SprungSpeed2Delayed -> Receiver_receiver.SprungSpeed2
        
        Receiver_receiver.RattleSpeed_m_s_ -> Damper_damper.RattleSpeed
        Receiver_receiver.SprungSpeed_m_s_ -> Damper_damper.SprungSpeed
        
        Damper_damper.DamperForce_N_ -> QuarterCar_qcar.DamperForce
    ]
}

# The initialization sequence of the algorithm. 
# No need to fill it, as it will be generated automatically
initialization = []

# The step loop of the algorithm.
# No need to fill it, as it will be generated automatically
cosim-step = {}